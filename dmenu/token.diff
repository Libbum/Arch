diff -u dmenu-4.5/dmenu.1 dmenu-token/dmenu.1
--- dmenu-4.5/dmenu.1	2013-02-08 22:28:55.718923115 -0700
+++ dmenu-token/dmenu.1	2013-02-08 22:29:42.995416333 -0700
@@ -6,6 +6,7 @@
 .RB [ \-b ]
 .RB [ \-f ]
 .RB [ \-i ]
+.RB [ \-t ]
 .RB [ \-l
 .IR lines ]
 .RB [ \-h
@@ -51,6 +52,9 @@
 .B \-i
 dmenu matches menu items case insensitively.
 .TP
+.B \-t
+dmenu uses space\-separated tokens to match menu items.
+.TP
 .BI \-l " lines"
 dmenu lists items vertically, with the given number of lines.
 .TP
diff -u dmenu-4.5/dmenu.c dmenu-token/dmenu.c
--- dmenu-4.5/dmenu.c	2013-02-08 22:28:55.718923115 -0700
+++ dmenu-token/dmenu.c	2013-02-08 22:50:31.813870783 -0700
@@ -33,7 +33,8 @@
 static void grabkeyboard(void);
 static void insert(const char *str, ssize_t n);
 static void keypress(XKeyEvent *ev);
-static void match(void);
+static void matchstr(void);
+static void matchtok(void);
 static size_t nextrune(int inc);
 static void paste(void);
 static void readstdin(void);
@@ -71,6 +72,7 @@
 
 static int (*fstrncmp)(const char *, const char *, size_t) = strncmp;
 static char *(*fstrstr)(const char *, const char *) = strstr;
+static void (*match)(void) = matchstr;
 
 int
 main(int argc, char *argv[]) {
@@ -93,6 +95,8 @@
 			fstrncmp = strncasecmp;
 			fstrstr = cistrstr;
 		}
+		else if(!strcmp(argv[i], "-t"))
+			match = matchtok;
 		else if(i+1 == argc)
 			usage();
 		/* these options take one argument */
@@ -423,7 +427,7 @@
 }
 
 void
-match(void) {
+matchstr(void) {
 	static char **tokv = NULL;
 	static int tokn = 0;
 
@@ -476,6 +480,33 @@
 	calcoffsets();
 }
 
+void
+matchtok(void) {
+	char buf[sizeof text];
+	char **tokv, *s;
+	int tokc, i;
+	Item *item, *end;
+
+	tokc = 0;
+	tokv = NULL;
+	strcpy(buf, text);
+	for(s = strtok(buf, " "); s; tokv[tokc-1] = s, s = strtok(NULL, " "))
+		if(!(tokv = realloc(tokv, ++tokc * sizeof *tokv)))
+			eprintf("cannot realloc %u bytes\n", tokc * sizeof *tokv);
+
+	matches = end = NULL;
+	for(item = items; item->text; item++) {
+		for(i = 0; i < tokc; i++)
+			if(!fstrstr(item->text, tokv[i]))
+				break;
+		if(i == tokc)
+			appenditem(item, &matches, &end);
+	}
+	free(tokv);
+	curr = prev = next = sel = matches;
+	calcoffsets();
+}
+
 size_t
 nextrune(int inc) {
 	ssize_t n;
